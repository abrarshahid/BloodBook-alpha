# Generated by Django 3.1.7 on 2021-06-23 06:12

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('location', models.CharField(max_length=1800)),
                ('role', models.CharField(max_length=50)),
                ('blood_grp', models.CharField(max_length=10)),
                ('served', models.IntegerField(default=0)),
                ('phone_number', models.CharField(max_length=13)),
                ('service_type', models.CharField(default='volunteer', max_length=90)),
                ('neighbourhood', models.CharField(default=' ', max_length=300)),
                ('town', models.CharField(default=' ', max_length=300)),
                ('img', models.ImageField(upload_to='images/')),
                ('status', models.CharField(default='Activated', max_length=40, null=True)),
                ('deactivated_time', models.DateField(null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='p2p_donation_receive',
            fields=[
                ('log_id', models.AutoField(primary_key=True, serialize=False)),
                ('status', models.CharField(max_length=90)),
                ('time', models.DateTimeField(auto_now_add=True)),
                ('donor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='donor', to=settings.AUTH_USER_MODEL)),
                ('receiver', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='receiver', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='emergency_receiver',
            fields=[
                ('receiver_id', models.AutoField(primary_key=True, serialize=False)),
                ('neighbourhood', models.CharField(default=' ', max_length=300)),
                ('town', models.CharField(default=' ', max_length=300)),
                ('location', models.CharField(default=' ', max_length=1800)),
                ('blood_grp', models.CharField(default=' ', max_length=20)),
                ('status', models.CharField(default='requested', max_length=90)),
                ('emergency_donor', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='emergency_donor', to=settings.AUTH_USER_MODEL)),
                ('emergency_receiver', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='emergency_receiver', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Compliment',
            fields=[
                ('compliment_id', models.AutoField(primary_key=True, serialize=False)),
                ('compliment', models.CharField(max_length=200)),
                ('complimented_to', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='complimented', to=settings.AUTH_USER_MODEL)),
                ('complimenter', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='complimenter', to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]
